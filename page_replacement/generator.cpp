#include <iostream>
#include <set>
#include <iterator>
#include <ctime>
#include <bits/stdc++.h>
#include <climits>
#include <error.h>


using namespace std;



int main()
{
    int ref, ws, pg;
    float ref_prob, rd_prob;
    FILE *fp, *fdat;

    cout<<"Enter the total number of Pages : ";
    cin>>pg;
    while(pg > 64)
    {
        cout<<"\n!! Warning !!  Number of logical pages cannot be greater than 64 !! Warning !!\n\n";
        cout<<"Enter the total number of Pages : ";
        cin>>pg;
    }
    cout<<"\nEnter the number of Page  frame reference : ";
    cin>>ref;
    cout<<"\nEnter the working set size : ";
    cin>>ws;
    while(pg < ws)
    {
        cout<<"\n!! Warning !! Working set size must be less than number of logical pages !! Warning !!\n";
        cout<<"\nEnter the working set size : ";
        cin>>ws;
    }

    cout<<"\nEnter the probability of locality of reference : ";
    cin>>ref_prob;
    cout<<"\nEnter the read probability : ";
    cin>>rd_prob;



    fp = fopen("inputt.txt","w");
	fdat = fopen("points.dat","w");
	fprintf(fp,"# reference string generated by generator.cpp\n");
	fprintf(fdat, "# data file\n#line\tlocality\n");

    vector<int> working_set;
    set <int> w_set;
    for(int i=0; i< ws; i++)
    {
        int x = rand()%pg;
        working_set.push_back(x);
        w_set.insert(x);
    }


    int j,k,l,f, pg_no,rd;
    for(int i=0; i<ref; i++)
    {
        //srand(3);
        j = rand()%100;
        if(j < (int)(ref_prob*100))
        {
            //srand(0);
            k = rand()%ws;
            pg_no = working_set[k];
            f=1;
        }

        else
        {
            f=0;
            do
            {
                //srand(1);
                pg_no = rand()%pg;
            }
            while(w_set.find(pg_no) != w_set.end());
        }
        //srand(2);
        l = rand()%100;
        // cout<<"l :"<<l<<"\n";
        if(l < (int)(rd_prob*100)) rd = 1;
        else  rd =0;

        fprintf(fp, "%d %d\n", rd, pg_no);
        fprintf(fdat, "%d %d\n", i, f);

    }


}
